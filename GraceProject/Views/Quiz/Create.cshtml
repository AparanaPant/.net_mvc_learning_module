@model GraceProject.ViewModels.QuizViewModel

@{
    ViewData["Title"] = "Create Quiz";
    Layout = "~/Views/Shared/_StudentLayout.cshtml";
}

<h2>Create Quiz</h2>

<div class="quiz-creation-section">
    <form asp-action="Create" method="post" enctype="multipart/form-data">
        <input type="hidden" asp-for="CourseID" />
        <input type="hidden" asp-for="SessionID" />
        <div class="total-score-section">
            <label><strong>Total Score:</strong></label>
            <span id="displayTotalScore">0</span>
        </div>
        <input type="hidden" id="TotalScore" name="TotalScore" value="0" />

        <div class="form-group">
            <label for="Title">Title</label>
            <input type="text" asp-for="Title" class="form-control" style="width: 50%;" />
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label for="Duration">Duration (in minutes)</label>
            <input type="number" asp-for="Duration" class="form-control" style="width: 50%;" min="1" required />
            <span asp-validation-for="Duration" class="text-danger"></span>
        </div>

        <div class="question-section">
            <h3>Questions</h3>
            <div id="questions-container">
                <!-- Questions will be dynamically added here -->
            </div>
            <button type="button" class="btn btn-secondary" onclick="addQuestion()">Add Question</button>
        </div>

        <div class="form-group button-container">
            <button type="submit" class="btn btn-primary create-button">Create</button>
        </div>
    </form>
</div>


@section Scripts {
    <script>
        let questions = [];

        function addQuestion() {
            const questionIndex = questions.length;
            questions.push({ Type: "Multiple Choice", Points: 0, Text: "", ImageUrl: "", Options: [], FillInTheBlankAnswers: [] });
                const questionDiv = document.createElement('div');
                questionDiv.classList.add('question-div');
                questionDiv.dataset.index = questionIndex;
                questionDiv.innerHTML = `
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <label>Question Type</label>
                                    <select class="form-control question-type" style="width: auto;" onchange="changeAnswerSection(this)" name="Questions[${questionIndex}].Type">
                                        <option value="Multiple Choice">Multiple Choice</option>
                                        <option value="True/False">True/False</option>
                                        <option value="Fill in the Blank">Fill in the Blank</option>
                                    </select>
                                </div>
                                <div>
                                    <label>Points</label>
                                    <input type="number" class="form-control question-points" value="0" type="number" min="1" style="width: auto;"
                                        name="Questions[${questionIndex}].Points"
                                        onchange="updateQuestionPoints(this, ${questionIndex})" />
                                </div>
                            </div>
                            <div class="question-attributes">
                                <label>Question Text</label>
                                <textarea class="form-control question-text" style="width: 100%;" name="Questions[${questionIndex}].Text"></textarea>

                                <label>Question Image</label>
                                       <input type="file" class="form-control question-image"
                                    name="Questions[${questionIndex}].ImageFile" onchange="previewImage(this, ${questionIndex})" />
                                <input type="hidden" class="img-url" name="Questions[${questionIndex}].ImageUrl" value="" />
                                <img src="" class="img-preview" style="width: 100px; height: auto; display: none;" />
                            </div>

                            <div class="answer-section mt-3">
                                <!-- Answer input section will be dynamically inserted here -->
                            </div>
                            <div class="d-flex justify-content-end mt-3">
                                <button type="button" class="btn btn-primary update-question" onclick="updateQuestion(this)">Update Question</button>
                            </div>
                        </div>
                    </div>
                `;
            document.getElementById('questions-container').appendChild(questionDiv);
            changeAnswerSection(questionDiv.querySelector(".question-type"));
            updateTotalScore();
        }

            function updateQuestionPoints(input, questionIndex) {
                    const newPoints = parseInt(input.value, 10) || 0;
                    questions[questionIndex].Points = newPoints;
                    updateTotalScore();
                        }


        function changeAnswerSection(select) {
            const questionDiv = select.closest('.question-div');
            const questionIndex = questionDiv.dataset.index;
            const answerSection = questionDiv.querySelector('.answer-section');
            const questionType = select.value;

            questions[questionIndex].Type = questionType;
            answerSection.innerHTML = ''; // Clear existing answers

            if (questionType === "Multiple Choice") {
                answerSection.innerHTML = `
                            <label>Options</label>
                            <div class="option-list"></div>
                            <button type="button" class="btn btn-secondary add-option-button" onclick="addOption(this, ${questionIndex})">Add Option</button>
                        `;
            } else if (questionType === "True/False") {
                answerSection.innerHTML = `
                            <label>Options</label>
                            <div class="option-instance">
                                <input type="radio" name="Questions[${questionIndex}].Options[0].Selected" value="true" id="true-option-${questionIndex}" />
                                <label for="true-option-${questionIndex}">True</label>
                                <input type="radio" name="Questions[${questionIndex}].Options[1].Selected" value="false" id="false-option-${questionIndex}" />
                                <label for="false-option-${questionIndex}">False</label>
                                <input type="hidden" name="Questions[${questionIndex}].Options[0].Text" value="True" />
                                <input type="hidden" name="Questions[${questionIndex}].Options[1].Text" value="False" />
                                <input type="hidden" name="Questions[${questionIndex}].Options[0].IsCorrect" value="false" />
                                <input type="hidden" name="Questions[${questionIndex}].Options[1].IsCorrect" value="false" />
                            </div>
                        `;
            } else if (questionType === "Fill in the Blank") {
                answerSection.innerHTML = `
                            <label>Answers</label>
                            <div class="fitb-answer-list"></div>
                            <button type="button" class="btn btn-secondary add-answer-button" onclick="addFitbAnswer(this, ${questionIndex})">Add Answer</button>
                        `;
            } else if (questionType === "Matching") {
                answerSection.innerHTML = `
                            <label>Matching Pairs</label>
                            <div class="matching-pairs"></div>
                            <button type="button" class="btn btn-secondary add-pair-button" onclick="addPair(this, ${questionIndex})">Add Pair</button>
                        `;
            } else if (questionType === "File Upload Question") {
                answerSection.innerHTML = `
                            <label>File Upload</label>
                            <input type="file" class="form-control" name="Questions[${questionIndex}].FileUpload" />
                        `;
            }
        }

        function addFitbAnswer(button, questionIndex) {
            const answerSection = button.closest('.answer-section');
            const answerList = answerSection.querySelector('.fitb-answer-list');
            const answerIndex = answerList.children.length;

            const answerDiv = document.createElement('div');
            answerDiv.classList.add('fitb-answer-instance');
            answerDiv.innerHTML = `
                        <input type="text" class="form-control fitb-answer-text" name="Questions[${questionIndex}].FillInTheBlankAnswers[${answerIndex}]" />
                    `;

            answerList.appendChild(answerDiv);
        }

        function addOption(button, questionIndex) {
            const answerSection = button.closest('.answer-section');
            const optionList = answerSection.querySelector('.option-list');
            const optionIndex = optionList.children.length;

            const optionDiv = document.createElement('div');
            optionDiv.classList.add('option-instance');
            optionDiv.innerHTML = `
                                <input type="text" class="form-control option-text" name="Questions[${questionIndex}].Options[${optionIndex}].Text" />
                                <input type="checkbox" class="is-correct-checkbox" name="Questions[${questionIndex}].Options[${optionIndex}].IsCorrect" value="true" />
                                <label>Is Correct</label>
                            `;

            optionList.appendChild(optionDiv);
        }

                   function previewImage(input, questionIndex) {
            const questionDiv = input.closest('.question-div');
            const imgPreview = questionDiv.querySelector('.img-preview');
            const imgUrlInput = questionDiv.querySelector('.img-url');

            if (input.files && input.files[0]) {
                const formData = new FormData();
                formData.append("ImageFile", input.files[0]);
                formData.append("questionIndex", questionIndex); 

                fetch('/Quiz/UploadImage', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    imgPreview.src = data.imageUrl;
                    imgPreview.style.display = 'block';
                    imgUrlInput.value = data.imageUrl; 
                    questions[questionIndex].ImageUrl = data.imageUrl; 
                })
                .catch(error => console.error("Error uploading image:", error));
            }
        }


                  function updateQuestion(button) {
            const questionDiv = button.closest('.question-div');
            const questionIndex = questionDiv.dataset.index;

            const questionText = questionDiv.querySelector('.question-text').value.trim();
            const points = parseInt(questionDiv.querySelector('.question-points').value, 10) || 0;
            const questionType = questions[questionIndex].Type;

            // Validation: Ensure question text is not empty
            if (!questionText) {
                alert("Question text cannot be empty.");
                return;
            }

            // Validation: Ensure points are greater than zero
            if (points <= 0) {
                alert("Points must be greater than zero.");
                return;
            }

            const options = [];
            const fillInTheBlankAnswers = [];
            let correctAnswerCount = 0;

            if (questionType === "True/False") {
                const trueOption = questionDiv.querySelector(`#true-option-${questionIndex}`);
                const falseOption = questionDiv.querySelector(`#false-option-${questionIndex}`);

                // Validation: Ensure a correct answer is selected for True/False
                if (!trueOption.checked && !falseOption.checked) {
                    alert("You must select a correct answer for True/False.");
                    return;
                }

                options.push({ Text: "True", IsCorrect: trueOption.checked });
                options.push({ Text: "False", IsCorrect: falseOption.checked });

            } else if (questionType === "Multiple Choice") {
                const optionElements = questionDiv.querySelectorAll('.option-instance');

                // Validation: Ensure at least two options exist
                if (optionElements.length < 2) {
                    alert("Multiple choice questions must have at least two options.");
                    return;
                }

                optionElements.forEach((optionDiv) => {
                    const text = optionDiv.querySelector('.option-text').value.trim();
                    const isCorrect = optionDiv.querySelector('.is-correct-checkbox').checked;
                    if (!text) {
                        alert("All options must have text.");
                        return;
                    }
                    if (isCorrect) correctAnswerCount++;

                    options.push({ Text: text, IsCorrect: isCorrect });
                });

                // Validation: Ensure exactly one correct answer is selected for MCQ
                if (correctAnswerCount !== 1) {
                    alert("Multiple Choice questions must have exactly one correct answer.");
                    return;
                }

            } else if (questionType === "Fill in the Blank") {
                const answerInstances = questionDiv.querySelectorAll('.fitb-answer-instance input');

                // Validation: Ensure at least one answer is provided
                if (answerInstances.length === 0) {
                    alert("Fill in the Blank must have at least one answer.");
                    return;
                }

                answerInstances.forEach(input => {
                    const answerText = input.value.trim();
                    if (!answerText) {
                        alert("Fill in the Blank answers cannot be empty.");
                        return;
                    }
                    fillInTheBlankAnswers.push(answerText);
                });
            }

            // ✅ Image Handling: Ensure the correct image is assigned to this question
            const imgUrlInput = questionDiv.querySelector('.img-url');
            if (imgUrlInput && imgUrlInput.value.trim() !== "") {
                questions[questionIndex].ImageUrl = imgUrlInput.value.trim();  
            }

            // Update question details
            questions[questionIndex].Text = questionText;
            questions[questionIndex].Points = points;
            questions[questionIndex].Options = options;
            questions[questionIndex].FillInTheBlankAnswers = fillInTheBlankAnswers;

            // Collapse the question section to only show the question text
            const collapsedSection = document.createElement('div');
            collapsedSection.classList.add('collapsed-question');
            collapsedSection.innerHTML = `
                <div class="d-flex justify-content-between">
                    <div>
                        <strong>Question:</strong> ${questions[questionIndex].Text}
                    </div>
                    <button type="button" class="btn btn-secondary" onclick="editQuestion(this)">Edit Question</button>
                </div>
                <input type="hidden" name="Questions[${questionIndex}].Text" value="${questions[questionIndex].Text}" />
                <input type="hidden" name="Questions[${questionIndex}].Points" value="${questions[questionIndex].Points}" />
                <input type="hidden" name="Questions[${questionIndex}].Type" value="${questions[questionIndex].Type}" />
                <input type="hidden" name="Questions[${questionIndex}].ImageUrl" value="${questions[questionIndex].ImageUrl}" />
                ${fillInTheBlankAnswers.map((answer, answerIndex) => `
                    <input type="hidden" name="Questions[${questionIndex}].FillInTheBlankAnswers[${answerIndex}]" value="${answer}" />
                `).join('')}
                ${options.map((option, optionIndex) => `
                    <input type="hidden" name="Questions[${questionIndex}].Options[${optionIndex}].Text" value="${option.Text}" />
                    <input type="hidden" name="Questions[${questionIndex}].Options[${optionIndex}].IsCorrect" value="${option.IsCorrect}" />
                `).join('')}
            `;

            questionDiv.innerHTML = '';
            questionDiv.appendChild(collapsedSection);
        }


        function editQuestion(button) {
            const questionDiv = button.closest('.question-div');
            const questionIndex = questionDiv.dataset.index;

            const question = questions[questionIndex];
            questionDiv.innerHTML = `
                        <div class="card mb-3">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <label>Question Type</label>
                                        <select class="form-control question-type" style="width: auto;" onchange="changeAnswerSection(this)" name="Questions[${questionIndex}].Type">
                                            <option value="Multiple Choice" ${question.Type === "Multiple Choice" ? 'selected' : ''}>Multiple Choice</option>
                                            <option value="True/False" ${question.Type === "True/False" ? 'selected' : ''}>True/False</option>
                                            <option value="Fill in the Blank" ${question.Type === "Fill in the Blank" ? 'selected' : ''}>Fill in the Blank</option>
                                            // <option value="Matching" ${question.Type === "Matching" ? 'selected' : ''}>Matching</option>
                                            // <option value="File Upload Question" ${question.Type === "File Upload Question" ? 'selected' : ''}>File Upload Question</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label>Points</label>
                                        <input type="number" class="form-control question-points" value="${question.Points}" style="width: auto;" name="Questions[${questionIndex}].Points" />
                                    </div>
                                </div>
                                <div class="question-attributes">
                                    <label>Question Text</label>
                                    <textarea class="form-control question-text" style="width: 100%;" name="Questions[${questionIndex}].Text">${question.Text}</textarea>
                                           <label>Question Image</label>
                                            <input type="file" class="form-control question-image" style="width: 100%;"
                                                   name="Questions[${questionIndex}].Image" onchange="previewImage(this)" />
                                            <img src="" class="img-preview" style="width: 100px; height: auto; display: none;" />
                                            <input type="hidden" class="img-url" name="Questions[${questionIndex}].ImageUrl" value="" />
                                </div>
                                <div class="answer-section mt-3">
                                    <!-- Answer input section will be dynamically inserted here -->
                                </div>
                                <div class="d-flex justify-content-end mt-3">
                                    <button type="button" class="btn btn-primary update-question" onclick="updateQuestion(this)">Update Question</button>
                                </div>
                            </div>
                        </div>
                    `;

            changeAnswerSection(questionDiv.querySelector(".question-type"));

            // Restore options
            const answerSection = questionDiv.querySelector('.answer-section');
            if (question.Type === "Multiple Choice") {
                question.Options.forEach((option, index) => {
                    addOption(answerSection.querySelector('.add-option-button'), questionIndex);
                    const optionDiv = answerSection.querySelectorAll('.option-instance')[index];
                    optionDiv.querySelector('.option-text').value = option.Text;
                    optionDiv.querySelector('.is-correct-checkbox').checked = option.IsCorrect;
                });
            }
        }

        document.querySelector("form").addEventListener("submit", function (event) {
            event.preventDefault();

            questions.forEach((question, index) => {
                const formData = new FormData();
                formData.append(`Questions[${index}].QuestionId`, question.QuestionId);
                formData.append(`Questions[${index}].Type`, question.Type);
                formData.append(`Questions[${index}].Points`, question.Points);
                formData.append(`Questions[${index}].Text`, question.Text);
                formData.append(`Questions[${index}].ImageUrl`, question.ImageUrl);

                if (question.Type === "Fill in the Blank") {
                    question.FillInTheBlankAnswers.forEach((answer, answerIndex) => {
                        formData.append(`Questions[${index}].FillInTheBlankAnswers[${answerIndex}]`, answer);
                    });
                } else {
                    question.Options.forEach((option, optionIndex) => {
                        formData.append(`Questions[${index}].Options[${optionIndex}].Text`, option.Text);
                        formData.append(`Questions[${index}].Options[${optionIndex}].IsCorrect`, option.IsCorrect);
                    });
                }

                for (const pair of formData.entries()) {
                    console.log(pair[0], pair[1]);
                }
            });

            this.submit();
        });
         function updateTotalScore() {
            let totalScore = 0;
            questions.forEach(question => {
                totalScore += parseInt(question.Points, 10) || 0;
            });
            document.getElementById("TotalScore").value = totalScore;
            document.getElementById("displayTotalScore").innerText = totalScore;  // Update displayed score
        }

    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
<style>
    .quiz-creation-section {
        max-width: 90%;
        margin: 0 auto;
    }

    .total-score-section {
        margin-bottom: 20px;
        font-size: 18px;
        color: #333;
    }

    .question-div {
        margin-bottom: 20px;
    }

    .question-attributes,
    .answer-section {
        margin-top: 10px;
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 5px;
    }

    .update-question {
        margin-top: 20px;
    }

    .collapsed-question {
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 5px;
        background-color: #f9f9f9;
        margin-bottom: 10px;
    }

    .button-container {
        display: flex;
        justify-content: flex-end; /* Aligns the button to the right */
        margin-right: 20px; /* Add some margin to the right */
    }

    .create-button {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 150px;
        height: 40px;
        font-size: 16px;
        background-color: #6c757d; /* Matching the "Add Question" button color */
        color: #fff;
        border: none;
        border-radius: 5px; /* Slightly rounded corners */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
        cursor: pointer; /* Pointer cursor */
    }

</style>