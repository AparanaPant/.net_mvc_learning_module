@model GraceProject.Models.Report

@{
    ViewData["Title"] = "Admin Report";
    Layout = "~/Views/Shared/_StudentLayout.cshtml";
}

<div class="container mt-5">
    <h2 class="mb-4 text-center">Admin Report</h2>

    <!-- Search Form -->
    <div class="row mb-4">
        <!-- Search Type -->
        <!-- Search Type -->
        <div class="col-md-3">
            <label for="searchType" class="form-label">Search By</label>
            <select id="searchType" class="form-control">
                <option value="student">Student Name</option>
                <option value="course">Course Name</option>
                <option value="educator">Educator Name</option>
                <option value="school">School Name</option>  <!-- New Option -->
            </select>
        </div>

        <!-- Search Value -->
        <div class="col-md-3">
            <label for="searchValue" class="form-label">Value</label>
            <input type="text" id="searchValue" class="form-control" placeholder="Type to search..." />
            <input type="hidden" id="selectedId">
        </div>

        <!-- Search For Dropdown -->
        <div class="col-md-3">
            <label for="searchFor" class="form-label">Search For</label>
            <select id="searchFor" class="form-control">
                <option value="">Please select</option>
            </select>
        </div>

        <!-- Dynamic Dropdown for Sessions -->
        <div class="col-md-3">
            <label for="dynamicDropdown" class="form-label">Select Session</label>
            <select id="dynamicDropdown" class="form-control">
                <option value="">Please select</option>
            </select>
        </div>

        <!-- Search Button -->
        <div class="col-md-3 mt-2">
            <button id="searchBtn" class="btn btn-primary w-100">Search</button>
        </div>
    </div>

    <!-- Placeholder for Results -->
    <div id="results" class="mt-5">
        <h5>Search Results:</h5>
        <pre id="resultsContent">No results yet.</pre>
    </div>
</div>

<!-- Load jQuery, jQuery UI, and Bootstrap Select -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>

<script>
    $(document).ready(function () {
        console.log("Document Ready!");

        // Initial setup
        setupAutocomplete();
        setupSearchForOptions();

        // Handle search type change
        $('#searchType').change(function () {
            console.log("Search Type Changed: " + $(this).val());
            $('#searchValue').val('');
            $('#dynamicDropdown').empty().append('<option value="">Please select</option>');
            setupAutocomplete();
            setupSearchForOptions();
        });

                    function setupSearchForOptions() {
                    let searchType = $('#searchType').val();
                    let searchForDropdown = $('#searchFor');
                    searchForDropdown.empty();

                    if (searchType === 'student') {
                        searchForDropdown.append(new Option("Grades", "grades"));
                        searchForDropdown.append(new Option("Time Spent on Slides", "timeSpent"));
                        searchForDropdown.append(new Option("Number of Slides Viewed", "slidesViewed"));
                    } else if (searchType === 'course' || searchType === 'educator') {
                        searchForDropdown.append(new Option("Grades", "grades"));
                    } else if (searchType === 'school') {  // New condition for School
                        searchForDropdown.append(new Option("Grades", "grades"));
                        searchForDropdown.append(new Option("Time Spent on Slides", "timeSpent"));
                        searchForDropdown.append(new Option("Number of Slides Viewed", "slidesViewed"));
                    } else {
                        searchForDropdown.append(new Option("Please select", ""));
                    }
                }


                // Setup autocomplete based on search type
                 function setupAutocomplete() {
                let searchType = $('#searchType').val();

                // Disable sessions if "school" is selected, otherwise enable
                if (searchType === 'school') {
                    $('#dynamicDropdown').prop('disabled', true).empty().append('<option value="">Please select</option>');
                } else {
                    $('#dynamicDropdown').prop('disabled', false); // Enable for other cases
                }

                let url = searchType === 'student' ? '/Report/Report/GetStudentList' :
                          searchType === 'course' ? '/Report/Report/GetCourseList' :
                          searchType === 'educator' ? '/Report/Report/GetEducatorList' :
                          searchType === 'school' ? '/Report/Report/GetSchoolList' :
                          '';

                $('#searchValue').autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: url,
                            type: 'POST',
                            contentType: 'application/json; charset=utf-8',
                            dataType: 'json',
                            data: JSON.stringify({ keyword: request.term }),
                            success: function (data) {
                                response($.map(data, function (item) {
                                    let labelText = searchType === 'student'
                                        ? `${item.name} (${item.email})`
                                        : item.name;

                                    return {
                                        label: labelText,
                                        value: item.id
                                    };
                                }));
                            },
                            error: function (xhr, status, error) {
                                console.log("AJAX Error:", error);
                            }
                        });
                    },
                    select: function (event, ui) {
                        $('#searchValue').val(ui.item.label);
                        $('#selectedId').val(ui.item.value);

                        // Load sessions dynamically only if the selected type requires it
                        if (searchType !== 'school') {
                            loadSessions(ui.item.value);
                        }

                        return false;
                    }
                });
            }

        // Load sessions based on selected type
        function loadSessions(selectedId) {
            let searchType = $('#searchType').val();
            let url = searchType === 'student' ? '/Report/Report/GetSessionsByStudent' :
                      searchType === 'course' ? '/Report/Report/GetSessionsByCourse' :
                      '/Report/Report/GetSessionsByEducator';

            $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                data: JSON.stringify({ id: selectedId }),
                success: function (data) {
                    $('#dynamicDropdown').empty().append('<option value="">Please select</option>');
                    $.each(data, function (index, item) {
                        $('#dynamicDropdown').append(new Option(item.name, item.id));
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Failed to load sessions:", error);
                }
            });
        }

        // Handle Search Button Click
              $('#searchBtn').off('click').on('click', function () {
        console.log("Search Button Clicked");

        let selectedSession = $('#dynamicDropdown').val();
        let searchType = $('#searchType').val();
        let searchFor = $('#searchFor').val();
        let selectedId = $('#selectedId').val(); // Corrected this

        console.log(`SearchType: ${searchType}, SearchFor: ${searchFor}, SelectedID: ${selectedId}, Session: ${selectedSession}`);

        if (!selectedId) {
            $('#resultsContent').text('Please select a valid value from the dropdown.');
            return;
        }

        if (searchType === 'school' && searchFor === 'grades') {
            fetchSchoolGrades(selectedId);
        } else if (searchType === 'student' && searchFor === 'grades' && selectedSession) {
            fetchGrades(selectedId, selectedSession);  // Corrected this
        } else if (searchType === 'course' && searchFor === 'grades' && selectedSession) {
            fetchCourseGrades(selectedSession);
        } else {
            $('#resultsContent').text('Please select a valid search option.');
        }
    });

    // Fetch School Grades Function
        function fetchSchoolGrades(schoolId) {
        $.ajax({
            url: '/Report/Report/GetSchoolGrades',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            data: JSON.stringify({ Id: schoolId }),
            success: function (data) {
                let resultsContent = $('#resultsContent');
                resultsContent.empty();

                if (data && data.Courses && data.Courses.length > 0) {
                    let gradeTable = `<table class="table table-bordered">
                        <thead><tr><th>Course</th><th>Student Name</th><th>Quiz Title</th><th>Score</th><th>Full Marks</th></tr></thead><tbody>`;

                    let quizTitles = [];
                    let scores = [];
                    let fullMarks = [];

                    data.Courses.forEach(function (course) {
                        course.Students.forEach(function (student) {
                            student.Quizzes.forEach(function (quiz) {
                                gradeTable += `<tr>
                                    <td>${course.CourseTitle}</td>
                                    <td>${student.StudentName}</td>
                                    <td>${quiz.QuizTitle}</td>
                                    <td>${quiz.Score}</td>
                                    <td>${quiz.FullMarks}</td>
                                </tr>`;
                                quizTitles.push(quiz.QuizTitle);
                                scores.push(quiz.Score);
                                fullMarks.push(quiz.FullMarks);
                            });
                        });
                    });

                    gradeTable += `<tr class="font-weight-bold"><td colspan="3">Total</td><td>${data.TotalScore}</td><td>${data.TotalFullMarks}</td></tr></tbody></table>`;
                    resultsContent.html(gradeTable);

                    // Render Charts
                    renderPieChart(quizTitles, scores);
                    renderBarChart(quizTitles, scores, fullMarks);
                } else {
                    resultsContent.text("No quiz data available for this school.");
                }
            },
            error: function (xhr, status, error) {
                console.error("Failed to fetch school quiz data:", error);
            }
        });
    }

            // Fetch Grades Function
                function fetchGrades(studentId, sessionId) {
            $.ajax({
                url: '/Report/Report/GetStudentGrades',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                data: JSON.stringify({ Id: sessionId, Keyword: studentId }),
                success: function (data) {
                    let resultsContent = $('#resultsContent');
                    resultsContent.empty();

                    console.log("Grades received:", data);
                    console.log("QuizResults:", data.quizResults);

                    // Check if quizResults exists
                    if (data && data.quizResults && data.quizResults.length > 0) {

                        let gradeTable = `<table class="table table-bordered">
                            <thead><tr><th>Quiz Title</th><th>Score</th><th>Full Marks</th></tr></thead><tbody>`;

                        data.quizResults.forEach(function (quiz) {
                            console.log("Quiz Data:", quiz);  // Log each quiz item

                            gradeTable += `<tr>
                                <td>${quiz.quizTitle}</td>
                                <td>${quiz.score}</td>
                                <td>${quiz.fullMarks}</td>
                            </tr>`;
                        });

                        gradeTable += `<tr class="font-weight-bold"><td>Total</td><td>${data.totalScore}</td><td>${data.totalFullMarks}</td></tr></tbody></table>`;
                        resultsContent.html(gradeTable);
                    } else {
                        resultsContent.text("No grades available for this session.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Failed to fetch grades:", error);
                }
            });
        }


           function fetchCourseGrades(sessionId) {
        $('#resultsContent').html("<div class='text-center'><span class='spinner-border'></span> Loading grades...</div>");

        $.ajax({
            url: '/Report/Report/GetCourseGrades',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            data: JSON.stringify({ Id: sessionId }),
            success: function (data) {
                let resultsContent = $('#resultsContent');
                resultsContent.empty();

                if (data && data.students && data.students.length > 0) {
                    let gradeTable = `<table class="table table-bordered">
                        <thead>
                            <tr><th>Student Name</th><th>Quiz Title</th><th>Score</th><th>Full Marks</th></tr>
                        </thead><tbody>`;

                    data.students.forEach(function (student) {
                        student.quizzes.forEach(function (quiz) {
                            gradeTable += `<tr>
                                <td>${student.studentName}</td>
                                <td>${quiz.quizTitle}</td>
                                <td>${quiz.obtainedScore}</td>
                                <td>${quiz.totalScore}</td>
                            </tr>`;
                        });
                    });

                    gradeTable += `</tbody></table>`;
                    resultsContent.html(gradeTable);
                } else {
                    resultsContent.html("<div class='alert alert-warning'>No grades available for this session.</div>");
                }
            },
            error: function (xhr, status, error) {
                console.error("Failed to fetch grades:", error);
                $('#resultsContent').html("<div class='alert alert-danger'>Failed to load grades. Please try again later.</div>");
            }
        });
    }


    });
</script>
